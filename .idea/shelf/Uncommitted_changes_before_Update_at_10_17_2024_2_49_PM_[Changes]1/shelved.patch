Index: src/Simulator/Simulator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Simulator;\r\n\r\nimport java.util.Random;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\n\r\nimport Animals.*;\r\nimport Field.*;\r\nimport Graph.*;\r\nimport processing.core.PApplet;\r\n\r\n/**\r\n * A simple predator-prey simulator, based on a field containing rabbitList and\r\n * foxList.\r\n *\r\n * @author David J. Barnes and Michael Kolling. Modified by David Dobervich and Daniel Hutzley\r\n * 2007-2022\r\n */\r\npublic class Simulator {\r\n    // The default width for the grid.\r\n    private static final int DEFAULT_WIDTH = 80;\r\n\r\n    // The default height of the grid.\r\n    private static final int DEFAULT_HEIGHT = 80;\r\n\r\n    // How many pixels to leave as a buffer between rendered elements\r\n    private static final int VIEW_EDGE_BUFFER = 20;\r\n\r\n    // The probability that a fox will be created in any given grid position.\r\n    private static final double FOX_CREATION_PROBABILITY = 0.02;\r\n\r\n    // The probability that a rabbit will be created in any given grid position.\r\n    private static final double RABBIT_CREATION_PROBABILITY = 0.08;\r\n\r\n    //The probability that a tiger will be created in any given grid position\r\n    private static final double TIGER_CREATION_PROBABILITY = 0.01;\r\n    // Lists of animals in the field. Separate lists are kept for ease of\r\n    // iteration.\r\n    private ArrayList<Rabbit> rabbitList;\r\n    private ArrayList<Fox> foxList;\r\n    private ArrayList<Tiger> tigerList;\r\n\r\n    // The current state of the field.\r\n    private Field field;\r\n\r\n    // A second field, used to build the next stage of the simulation.\r\n    private Field updatedField;\r\n\r\n    // The current step of the simulation.\r\n    private int step;\r\n\r\n    // A graphical view of the simulation.\r\n    private FieldDisplay view;\r\n\r\n    // A graph of animal populations over time\r\n    private Graph graph;\r\n\r\n    // Processing Applet (the graphics window we draw to)\r\n    private PApplet graphicsWindow;\r\n\r\n    // Object to keep track of statistics of animal populations\r\n    private FieldStats stats;\r\n\r\n    /**\r\n     * Construct a simulation field with default size.\r\n     */\r\n    public Simulator() {\r\n        this(DEFAULT_HEIGHT, DEFAULT_WIDTH);\r\n    }\r\n\r\n    /**\r\n     * Create a simulation field with the given size.\r\n     *\r\n     * @param height Height of the field. Must be greater than zero.\r\n     * @param width  Width of the field. Must be greater than zero.\r\n     */\r\n    public Simulator(int width, int height) {\r\n        if (width <= 0 || height <= 0) {\r\n            System.out.println(\"The dimensions must be greater than zero.\");\r\n            System.out.println(\"Using default values.\");\r\n            height = DEFAULT_HEIGHT;\r\n            width = DEFAULT_WIDTH;\r\n        }\r\n\r\n        rabbitList = new ArrayList<Rabbit>();\r\n        foxList = new ArrayList<Fox>();\r\n        tigerList = new ArrayList<Tiger>();\r\n        field = new Field(width, height);\r\n        updatedField = new Field(width, height);\r\n        stats = new FieldStats();\r\n\r\n        // Setup a valid starting point.\r\n        reset();\r\n    }\r\n\r\n    public void setGUI(PApplet p) {\r\n        this.graphicsWindow = p;\r\n\r\n        // Create a view of the state of each location in the field.\r\n        view = new FieldDisplay(p, this.field, VIEW_EDGE_BUFFER, VIEW_EDGE_BUFFER, p.width - 2*VIEW_EDGE_BUFFER, p.height / 2 - 2 * VIEW_EDGE_BUFFER);\r\n        view.setColor(Rabbit.class, p.color(155, 155, 155));\r\n        view.setColor(Fox.class, p.color(200, 0, 255));\r\n\r\n        graph = new Graph(p, view.getLeftEdge(), view.getBottomEdge()+VIEW_EDGE_BUFFER, view.getRightEdge(), p.height-VIEW_EDGE_BUFFER, 0,\r\n                0, 500, field.getHeight() * field.getWidth());\r\n\r\n        graph.title = \"Animals.Fox and Animals.Rabbit Populations\";\r\n        graph.xlabel = \"Time\";\r\n        graph.ylabel = \"Pop.\\t\\t\";\r\n        graph.setColor(Rabbit.class, p.color(155, 155, 155));\r\n        graph.setColor(Fox.class, p.color(200, 0, 255));\r\n    }\r\n\r\n    /**\r\n     * Run the simulation from its current state for a reasonably long period,\r\n     * e.g. 500 steps.\r\n     */\r\n    public void runLongSimulation() {\r\n        simulate(500);\r\n    }\r\n\r\n    /**\r\n     * Run the simulation from its current state for the given number of steps.\r\n     * Stop before the given number of steps if it ceases to be viable.\r\n     *\r\n     * @param numSteps The number of steps to run for.\r\n     */\r\n    public void simulate(int numSteps) {\r\n        for (int step = 1; step <= numSteps && isViable(); step++) {\r\n            simulateOneStep();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Run the simulation from its current state for a single step. Iterate over\r\n     * the whole field updating the state of each fox and rabbit.\r\n     */\r\n    public void simulateOneStep() {\r\n        step++;\r\n\r\n        // New List to hold newborn rabbitList.\r\n        ArrayList<Rabbit> babyRabbitStorage = new ArrayList<Rabbit>();\r\n\r\n        // Loop through all Rabbits. Let each run around.\r\n        for (int i = 0; i < rabbitList.size(); i++) {\r\n            Rabbit rabbit = rabbitList.get(i);\r\n            rabbit.run(updatedField, babyRabbitStorage);\r\n            if (!rabbit.isAlive()) {\r\n                rabbitList.remove(i);\r\n                i--;\r\n            }\r\n        }\r\n\r\n        // Add newborn rabbitList to the main list of rabbitList.\r\n        rabbitList.addAll(babyRabbitStorage);\r\n\r\n        // Create new list for newborn foxList.\r\n        ArrayList<Fox> babyFoxStorage = new ArrayList<Fox>();\r\n\r\n        // Loop through Foxes; let each run around.\r\n        for (int i = 0; i < foxList.size(); i++) {\r\n            Fox fox = foxList.get(i);\r\n            fox.hunt(field, updatedField, babyFoxStorage);\r\n            if (!fox.isAlive()) {\r\n                foxList.remove(i);\r\n                i--;\r\n            }\r\n        }\r\n\r\n        // Add new born foxList to the main list of foxList.\r\n        foxList.addAll(babyFoxStorage);\r\n\r\n        //Create new list for newborn tigerList.\r\n        ArrayList<Tiger> babyTigerStorage = new ArrayList<Tiger>();\r\n\r\n        // Loop through Tigers; let each run around.\r\n        for (int i = 0; i < tigerList.size(); i++) {\r\n            Tiger tiger = tigerList.get(i);\r\n            tiger.hunt(field, updatedField, babyTigerStorage);\r\n            if (!tiger.isAlive()){\r\n                tigerList.remove(i);\r\n                i--;\r\n            }\r\n        }\r\n\r\n        //Add newborn tigerList to the main list of tigerList.\r\n        tigerList.addAll(babyTigerStorage);\r\n\r\n        // Swap the field and updatedField at the end of the step.\r\n        Field temp = field;\r\n        field = updatedField;\r\n        updatedField = temp;\r\n        updatedField.clear();\r\n\r\n        stats.generateCounts(field);\r\n        updateGraph();\r\n    }\r\n\r\n    public void updateGraph() {\r\n        Counter count;\r\n        for (Counter c : stats.getCounts()) {\r\n            graph.plotPoint(step, c.getCount(), c.getClassName());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the simulation to a starting position.\r\n     */\r\n    public void reset() {\r\n        step = 0;\r\n        rabbitList.clear();\r\n        foxList.clear();\r\n        tigerList.clear();\r\n        field.clear();\r\n        updatedField.clear();\r\n        initializeBoard(field);\r\n\r\n        if (graph != null) {\r\n            graph.clear();\r\n            graph.setDataRanges(0, 500, 0, field.getHeight() * field.getWidth());\r\n        }\r\n\r\n        // Show the starting state in the view.\r\n        // view.showStatus(step, field);\r\n    }\r\n\r\n    /**\r\n     * Populate a field with foxList and rabbitList.\r\n     *\r\n     * @param field The field to be populated.\r\n     */\r\n    private void initializeBoard(Field field) {\r\n        Random rand = new Random();\r\n        field.clear();\r\n        for (int row = 0; row < field.getHeight(); row++) {\r\n            for (int col = 0; col < field.getWidth(); col++) {\r\n                if (rand.nextDouble() <= FOX_CREATION_PROBABILITY) {\r\n                    Fox fox = new Fox(true);\r\n                    fox.setLocation(row, col);\r\n                    foxList.add(fox);\r\n                    field.put(fox, row, col);\r\n                } else if (rand.nextDouble() <= RABBIT_CREATION_PROBABILITY) {\r\n                    Rabbit rabbit = new Rabbit(true);\r\n                    rabbit.setLocation(row, col);\r\n                    rabbitList.add(rabbit);\r\n                    field.put(rabbit, row, col);\r\n                } else if (rand.nextDouble() <= TIGER_CREATION_PROBABILITY){\r\n                    Tiger tiger = new Tiger(true);\r\n                    tigerList.add(tiger);\r\n                    field.put(tiger, row, col);\r\n                }\r\n            }\r\n        }\r\n        Collections.shuffle(rabbitList);\r\n        Collections.shuffle(foxList);\r\n        Collections.shuffle(tigerList);\r\n    }\r\n\r\n    /**\r\n     * Determine whether the simulation is still viable.\r\n     * I.e., should it continue to run.\r\n     * @return true If there is more than one species alive.\r\n     */\r\n    private boolean isViable() {\r\n        return stats.isViable(field);\r\n    }\r\n\r\n    public Field getField() {\r\n        return this.field;\r\n    }\r\n\r\n    // Draw field if we have a gui defined\r\n    public void drawField() {\r\n        if ((graphicsWindow != null) && (view != null)) {\r\n            view.drawField(this.field);\r\n        }\r\n    }\r\n\r\n    public void drawGraph() {\r\n        graph.draw();\r\n    }\r\n\r\n    // Perform an action when the mouse was clicked.\r\n    // parameters are the x, y screen coordinates the user clicked on.\r\n    // Note: you probably want to modify handleMouseClick(Field.Location) which\r\n    // gives you the location they clicked on in the grid.\r\n    public void handleMouseClick(float mouseX, float mouseY) {\r\n        Location loc = view.gridLocationAt(mouseX, mouseY); // get grid at\r\n        // click.\r\n        if (loc == null) return;\r\n\r\n        for (int x = loc.getCol() - 8; x < loc.getCol() + 8; x++) {\r\n            for (int y = loc.getRow() - 8; y < loc.getRow() + 8; y++) {\r\n                Location locToCheck = new Location(y, x);\r\n                if (field.isLegalLocation(locToCheck)) {\r\n                    Object animal = field.getObjectAt(locToCheck);\r\n                    if (animal instanceof Rabbit)\r\n                        rabbitList.remove((Rabbit) animal);\r\n                    if (animal instanceof Fox)\r\n                        foxList.remove((Fox) animal);\r\n                    if (animal instanceof Tiger){\r\n                        tigerList.remove((Tiger) animal);\r\n                    }\r\n                    field.put(null, locToCheck);\r\n                    updatedField.put(null, locToCheck);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void handleMouseClick(Location l) {\r\n        System.out.println(\"Change handleMouseClick in Simulator.Simulator.java to do something!\");\r\n    }\r\n\r\n    public void handleMouseDrag(int mouseX, int mouseY) {\r\n        Location loc = this.view.gridLocationAt(mouseX, mouseY); // get grid at\r\n        // click.\r\n        if (loc == null)\r\n            return; // if off the screen, exit\r\n        handleMouseDrag(loc);\r\n    }\r\n\r\n    private void handleMouseDrag(Location l) {\r\n        System.out.println(\"Change handleMouseDrag in Simulator.Simulator.java to do something!\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Simulator/Simulator.java b/src/Simulator/Simulator.java
--- a/src/Simulator/Simulator.java	(revision a1fcf8f5d9befd8c1dd7735b4e11116dcaa1310a)
+++ b/src/Simulator/Simulator.java	(date 1728360413058)
@@ -98,17 +98,19 @@
 
         // Create a view of the state of each location in the field.
         view = new FieldDisplay(p, this.field, VIEW_EDGE_BUFFER, VIEW_EDGE_BUFFER, p.width - 2*VIEW_EDGE_BUFFER, p.height / 2 - 2 * VIEW_EDGE_BUFFER);
-        view.setColor(Rabbit.class, p.color(155, 155, 155));
-        view.setColor(Fox.class, p.color(200, 0, 255));
+        view.setColor(Rabbit.class, Integer.valueOf(p.color(155, 155, 155)));
+        view.setColor(Fox.class, Integer.valueOf(p.color(200, 0, 255)));
+        view.setColor(Tiger.class, Integer.valueOf(p.color(0, 200, 255)));
 
         graph = new Graph(p, view.getLeftEdge(), view.getBottomEdge()+VIEW_EDGE_BUFFER, view.getRightEdge(), p.height-VIEW_EDGE_BUFFER, 0,
                 0, 500, field.getHeight() * field.getWidth());
 
-        graph.title = "Animals.Fox and Animals.Rabbit Populations";
+        graph.title = "Animals.Fox, Animals.Rabbit, Animals.Tiger Populations";
         graph.xlabel = "Time";
         graph.ylabel = "Pop.\t\t";
-        graph.setColor(Rabbit.class, p.color(155, 155, 155));
-        graph.setColor(Fox.class, p.color(200, 0, 255));
+        graph.setColor(Rabbit.class, Integer.valueOf(p.color(155, 155, 155)));
+        graph.setColor(Fox.class, Integer.valueOf(p.color(200, 0, 255)));
+        graph.setColor(Tiger.class, Integer.valueOf(p.color(0, 200, 255)));
     }
 
     /**
